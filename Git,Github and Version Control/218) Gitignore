// Certains files containing Secret keys, Password, API keys should not be hosted in Github. If it is hosted then it may be misused by others.
// To avoid commiting of certain files to Github, we use .gitignore
// In hyper
cd "E:\Web development\Git & Github\Story"
mkdir Project
cd Project
touch file1.txt file2.txt file3.txt secrets.txt
touch .gitignore
ls

// To see hidden files
ls -a

// Initialize git inside current working directory.
git init

// To add all files inside working directory to staging area.
git add .

git status

// Now all files added to staging area. If we commit then all files will be commited. We don't want commit secrets.txt and .DS_Store files.
// To remove all files from staging area use below command.
git rm --cached -r .    // rm = remove, -r = Recursive.
git status      // Now we can see files removed from staging area (Files appears in red color)

atom .

// In atom, Inside .gitignore file write the file names which you don't want to commit or push to Github. Those files will not be added to staging area, if we add.
.DS_Store
secrets.txt

// Inside .gitignore file if we give "*.txt" then all txt files inside working directory will not be committed.
// In hyper
git add .
git status    // Now we can see that secrets.txt file is not added to staging area.
git commit -m "Initial commit"    // This is to commit remaining files.

// To use gitignore file inside node project. 
// Download the Test zip file provided in course resource.
// In hyper
cd "E:\Web development\Git & Github\Test"
atom .
npm i    // To install node modules
touch .gitignore

// In browser, Visit "https://github.com/github/gitignore/blob/main/Node.gitignore" This is github pre-build repository, which contains pre-build git files to be ignored
// in node project. We can copy that and paste it in our .gitignore file
// Inside .gitignore file # means comment. In addition to pre-built code, we can add our Project required files to ignore. Here we added that under #Project-wide.
// In .gitignore file
#Project-wide
.DS_Store


# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*


// In hyper
git init
git add .
git status
git commit -m "Initial commit"
nodemon index1.js

// In browser
localhost:3000/
