// JSON - Javascript Object Notation
// JSON is similar to Javascript object. Javascript objects contains key value pair separated by colon. JSON also contains key, value pair and contains key within "".
// All key in Json are considered as String.
// JSON is used to transfer data over internet in a readable format.

// When we want to transfer wardrobe from shop to home, we will flatten it by arraing all of its material. So, space is minimized and easy to carry, 
// without carrying air inside it and all.
// In a same way JSON is flattened over internet in a serial format. Then it will become easy to transfer. After Json reaches the destination then it will be arranged
// to it's original format.

// In this website we can view the serial Json on internet in a Formatted view -
https://jsonviewer.stack.hu/
// Paste the serial Json on Text window, then click on Viewer tab.

// To convert javascript object to JSON (With serial format and key will be in "")
// JS Object -> JSON
const jsonData = JSON.stringify(data);

// To convert JSON to Javascirpt object format. Serial format to Java script object format. By removing "" in key.
// JSON -> JS Object
cosnt data = JSON.parse(jsonData);


// Project send Javascript Objects from JS file to EJS file
// JS file contains data in JSON format. We convert it to Javascript object format.
// Download the module resource
// In hyper
cd "E:\Web development\API\5.2 JSON"
npm install
nodemon solution.js

// In index.js
..
..
const recipeJSON =
  '[{"id": "0001","type": "taco","name": "Chicken Taco","price": 2.99,"ingredients": {"protein": {"name": "Chicken","preparation": "Grilled"},  "salsa": {"name": "Tomato Salsa","spiciness": "Medium"},  "toppings": [{"name": "Lettuce",  "quantity": "1 cup",  "ingredients": ["Iceberg Lettuce"]  },      {"name": "Cheese",  "quantity": "1/2 cup",  "ingredients": ["Cheddar Cheese", "Monterey Jack Cheese"]  },      {"name": "Guacamole",  "quantity": "2 tablespoons",  "ingredients": ["Avocado", "Lime Juice", "Salt", "Onion", "Cilantro"]  },      {"name": "Sour Cream",  "quantity": "2 tablespoons",  "ingredients": ["Sour Cream"]  }      ]    }  },{"id": "0002","type": "taco","name": "Beef Taco","price": 3.49,"ingredients": {"protein": {"name": "Beef","preparation": "Seasoned and Grilled"},  "salsa": {"name": "Salsa Verde","spiciness": "Hot"},  "toppings": [{"name": "Onions",  "quantity": "1/4 cup",  "ingredients": ["White Onion", "Red Onion"]  },      {"name": "Cilantro",  "quantity": "2 tablespoons",  "ingredients": ["Fresh Cilantro"]  },      {"name": "Queso Fresco",  "quantity": "1/4 cup",  "ingredients": ["Queso Fresco"]  }      ]    }  },{"id": "0003","type": "taco","name": "Fish Taco","price": 4.99,"ingredients": {"protein": {"name": "Fish","preparation": "Battered and Fried"},  "salsa": {"name": "Chipotle Mayo","spiciness": "Mild"},  "toppings": [{"name": "Cabbage Slaw",  "quantity": "1 cup",  "ingredients": [    "Shredded Cabbage",    "Carrot",    "Mayonnaise",    "Lime Juice",    "Salt"          ]  },      {"name": "Pico de Gallo",  "quantity": "1/2 cup",  "ingredients": ["Tomato", "Onion", "Cilantro", "Lime Juice", "Salt"]  },      {"name": "Lime Crema",  "quantity": "2 tablespoons",  "ingredients": ["Sour Cream", "Lime Juice", "Salt"]  }      ]    }  }]';
      // To see the above Json in structured format, Go to this website and paste the above data there in text. "https://jsonviewer.stack.hu/".
let data;

app.get("/", (req, res) => {
  res.render("index.ejs", { recipe: data });  // To send data from JS file to EJS file.
});

app.post("/recipe", (req, res) => {
  //Step 3: Write your code here to make this behave like the solution website.
  //Step 4: Add code to views/index.ejs to use the recieved recipe object.

  switch (req.body.choice){    // req.body.choice will hold the value of button, when particular button is clicked on EJS file.
    case "chicken":
      data = JSON.parse(recipeJSON)[0];      // To convert JSON to Java script object and hold on first element of Javascript object.
        break;
    case "beef":
      data = JSON.parse(recipeJSON)[1];
        break;
    case "fish":
      data = JSON.parse(recipeJSON)[2];
        break;
    default:
      break;
  }
  res.redirect("/");  // Then redirect the data to route "/".
});
..
..


// In index.ejs file
..
..
<body>
  <h1>Taco Town üåÆ</h1>

  <form action="/recipe" method="POST" class="buttons">
    <button type="submit" value="chicken" name="choice">üçó</button>
    <button type="submit" value="beef" name="choice">ü•©</button>
    <button type="submit" value="fish" name="choice">üêü</button>
  </form>
  <div id="recipeContainer" class="hidden">


    <!-- Else, show the recipe name e.g. <h2>Recipe name</h2>-->
    <% if(locals.recipe){ %>
      <h2 id = "receipeTitle">
        <%= recipe.name %>        // recipe refers to the data sent from JS file.
      </h2>

      <h3>Ingredients:</h3>
      <ul id="ingredientsList">
        <li>
          <%= recipe.ingredients.protein.name %> , <%= recipe.ingredients.protein.preparation %>    // Based on particular button clicked, particular element of data is sent from JS file. 
                                                                                                    // We can tap into using "receipe" name sent from JS file.
        </li>
        <li>
          <%= recipe.ingredients.salsa.name %>
        </li>

        <% recipe.ingredients.toppings.forEach(topping => { %>    // In JSON formater website, we can see that toppings is an array. We can loop through each element of it.
        <li>
          <%= topping.quantity %> of <%= topping.name %>          // To display topping quantity and topping name of each element inside toppings array.
        </li>
        <% }) %>

      </ul>

    <% } else { %>
      <!-- If no recipe yet, show: -->
      <h2>Pick your favourite taco ingredient üëÜ</h2>
    <% } %>

  </div>
</body>
