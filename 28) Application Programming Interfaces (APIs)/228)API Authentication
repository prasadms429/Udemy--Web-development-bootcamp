There are diffenet kind of API authentication -
1. No Authentication
2. Basic Authentication
3. API key authorization
4. Token based Authentication

To restrict all user from using API we have some Authentication to API.

No Authentication -
Previosuly for Bored API we didn't have any authentication. Anyone can access it.
But for Bored API we have rate limit. Which is having 100 request per 15 minute.

Basic Authentication -
Basic Authentication will have USER name and Password for Authentication.
Usually in base authentication, we pass over base 64 endcode string in header of request.
Base 64 will take ASCCI character(Text) and convert that to bits (0's and 1's) and encode it to another character.
For example: MAN is base 64 encoded into TBAFu.
Each character is represented in binary.
In our case we will take User name and Password and convert those all into BASE 64. Then we can add this to Authorization header. We can pass this data when we make a request.
Example -
http://secrets-api.appbrewery.com/
With this API we can register new user by passing over User name and password in  the body of Post request.
Then we can use that User name and password perform GET request.
Using Post man make request -
https://secrets-api.appbrewery.com/all?page=1

Make post request to register route to regesiter username and password.
https://secrets-api.appbrewery.com/register
In Postman, Select Post -> Give URL -> click on Body -> click on x-www-form-urlencoded -> Give User name and password in key -> Enter values in for fields -> Click on Send

After registering, Select GET -> Click on Authorization -> Select type as Basic Auth -> Give URL as https://secrets-api.appbrewery.com/all?page=1 ->
Enter Username and Password -> Send
We can check encoded string by clicking on Headers on Postman -> Copy Authorization value present after Basic -> Paste value in this website -
https://www.base64decode.org/
Select source character set as ASCII -> Click on Decode -> Then we can see our User name and password.

Difference between Authentication and Authorization -
In Authentication User will use Username and Password to Authenticate themselef for service that API will 
provide.
In Authorization Client will use API key to Authorize themself to take API service.
The API key will be used to track particular service is used how many times per day.

To generate api key make Get request to below url -
https://secrets-api.appbrewery.com/generate-api-key

Make get request to below url with embarrassment score 7 -
https://secrets-api.appbrewery.com/filter?score=7&apiKey=keyValue
Or click on Authorization and select type as API key -> Give Key and Value -> Select Add to as Query Params -> Click on Send

In Basic authentication user name and password will be base 64 encoded and it can be decoded using Base64decode website. So some website will use https to secure
data they pass over internet. Then it can't be decoded.

Token based Authentication -
In Token based Authentication we will enter user name and password then one token will be generated, we will use that token to use services of API.

OAUTH is industry standard to use Token authentication.

For example -
If we have developed weather app which will make api request to Google calander to get user daily schedules. If on Tuesday the user has meeting then based on weather
weaterh app will send notification to bring umbrella.
User can sign with Google then one token will be generated to get Google calender service. This token will be furhter accessed to get data to our Weather app.

Make post request to below url to get token -> Click on body -> Click on x-www-form-urlencoded -> Enter usernme and password in key field -> Enter Values -> Send
https://secrets-api.appbrewery.com/get-auth-token

Make Get request to below url -> Click on Authorization -> Select type as Bearer token -> Enter token value -> Send
https://secrets-api.appbrewery.com/secrets/2

Challenge -
Resource download path -
D:\Web development\API\5.4+API+Authentication

index.js -
import express from "express";
import axios from "axios";

const app = express();
const port = 3000;
const API_URL = "https://secrets-api.appbrewery.com";

//TODO 1: Fill in your values for the 3 types of auth.
const yourUsername = "";
const yourPassword = "";
const yourAPIKey = "";
const yourBearerToken = "";

app.get("/", (req, res) => {
  res.render("index.ejs", { content: "API Response." });
});

app.get("/noAuth", async (req, res) => {
  //TODO 2: Use axios to hit up the /random endpoint
  //The data you get back should be sent to the ejs file as "content"
  //Hint: make sure you use JSON.stringify to turn the JS object from axios into a string.
  try {
    const result = await axios.get(API_URL + "/random");
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});

app.get("/basicAuth", async (req, res) => {
  //TODO 3: Write your code here to hit up the /all endpoint
  //Specify that you only want the secrets from page 2
  //HINT: This is how you can use axios to do basic auth:
  // https://stackoverflow.com/a/74632908
  /*
   axios.get(URL, {
      auth: {
        username: "abc",
        password: "123",
      },
    });
  */
  try {
    const result = await axios.get(API_URL + "/all?page=2", {
                     auth: {
                       username: yourUsername,
                       password: yourPassword,
                     },
    });
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});

app.get("/apiKey", async (req, res) => {
  //TODO 4: Write your code here to hit up the /filter endpoint
  //Filter for all secrets with an embarassment score of 5 or greater
  //HINT: You need to provide a query parameter of apiKey in the request.
  try {
    const result = await axios.get(API_URL + "/filter", {
                   params: {
                       score: 5,
                       apiKey: yourAPIKey,
                   },
    });
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});

app.get("/bearerToken", async (req, res) => {
  //TODO 5: Write your code here to hit up the /secrets/{id} endpoint
  //and get the secret with id of 42
  //HINT: This is how you can use axios to do bearer token auth:
  // https://stackoverflow.com/a/52645402
  /*
  axios.get(URL, {
    headers: {
      Authorization: `Bearer <YOUR TOKEN HERE>`
    },
  });
  */
  try {
    const result = await axios.get(API_URL + "/secrets/42", {
                     headers: {
                       Authorization: `Bearer ${yourBearerToken}`
                     },
    });
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.status(404).send(error.message);
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
