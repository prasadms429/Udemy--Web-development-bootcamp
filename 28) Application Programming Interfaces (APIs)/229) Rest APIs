With axios we can use axios.get().then() functionality or 
async await axios.get() 
both types will do same work.
Once after code inside await is executed, other code will be executed line by line.
async await modern Javascript syntax.

HTTP protocol -
GET, POST, PUT, PATCH, DELETE

While doing fetch request we are passing,
axios.get("URL", config)
Now for Post request we will pass,
axios.post("URL", body, config)
In body we will pass html body data such as User name and password.

In config we can pass basic authentication values, parameters, headers required for bearer token authorization.
If we want to replace some data from backend with new data then we make Put request. 
axios.put("URL", body, config)
syntax of put request is similar to post request.

If we want to update some data then we make Patch request.
axios.patch("URL", body, config)

Delete syntax -
axios.delete("URL", config)

We will use config to pass Javascript object.
axios.post("URL[, data[, config]])
If mention parameters inside sqare bracket then it is opetional to use. Here data and config are optional to pass.

//Challenge
Download path - D:\Web development\API\5.5 REST APIs
Open path in hyper and give below command,
npm i

index.js -
import express from "express";
import axios from "axios";
import bodyParser from "body-parser";

const app = express();
const port = 3000;
const API_URL = "https://secrets-api.appbrewery.com";

// HINTs: Use the axios documentation as well as the video lesson to help you.
// https://axios-http.com/docs/post_example
// Use the Secrets API documentation to figure out what each route expects and how to work with it.
// https://secrets-api.appbrewery.com/

//TODO 1: Add your own bearer token from the previous lesson.
const yourBearerToken = "b15f2761-b18d-4231-8d47-91eb006173f9";
const config = {
  headers: { Authorization: `Bearer ${yourBearerToken}` },
};

app.use(bodyParser.urlencoded({ extended: true }));

app.get("/", (req, res) => {
  res.render("index.ejs", { content: "Waiting for data..." });
});

app.post("/get-secret", async (req, res) => {
  const searchId = req.body.id;
  try {
    const result = await axios.get(API_URL + "/secrets/" + searchId, config);
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.render("index.ejs", { content: JSON.stringify(error.response.data) });
  }
});

app.post("/post-secret", async (req, res) => {
  // TODO 2: Use axios to POST the data from req.body to the secrets api servers.
  try {
    const result = await axios.post(API_URL + "/secrets/", req.body, config);
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.render("index.ejs", { content: JSON.stringify(error.response.data) });
  }
});

app.post("/put-secret", async (req, res) => {
  const searchId = req.body.id;
  // TODO 3: Use axios to PUT the data from req.body to the secrets api servers.

  try {
    const result = await axios.put(API_URL + "/secrets/" + searchId, req.body, config);
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.render("index.ejs", { content: JSON.stringify(error.response.data) });
  }
});  // Put request will update entire data in database. WHile Patch request is used for partial update of data.


app.post("/patch-secret", async (req, res) => {
  const searchId = req.body.id;
  // TODO 4: Use axios to PATCH the data from req.body to the secrets api servers.

  try {
    const result = await axios.patch(API_URL + "/secrets/" + searchId, req.body, config);
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.render("index.ejs", { content: JSON.stringify(error.response.data) });
  }
});

app.post("/delete-secret", async (req, res) => {
  const searchId = req.body.id;
  // TODO 5: Use axios to DELETE the item with searchId from the secrets api servers.
  try {
    const result = await axios.delete(API_URL + "/secrets/" + searchId, config);
    res.render("index.ejs", { content: JSON.stringify(result.data) });
  } catch (error) {
    res.render("index.ejs", { content: JSON.stringify(error.response.data) });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

